# カスタムプロンプト機能 - 開発記録

## 実施日: 2025-10-30

## 完了した実装

### 1. ConfigManagerの拡張 (src/config_manager.py)
✅ `get_custom_prompts()` - カスタムプロンプトの取得
✅ `save_custom_prompt()` - カスタムプロンプトの保存
✅ `delete_custom_prompt()` - カスタムプロンプトの削除

### 2. PromptManagerの更新 (src/prompts.py)
✅ `is_custom` フィールドを `PromptTemplate` に追加
✅ `load_custom_prompts()` - ConfigManagerからカスタムプロンプトを読み込み
✅ `reload_custom_prompts()` - カスタムプロンプトの再読み込み
✅ カスタムプロンプトに "custom_" プレフィックスを自動付与

### 3. GUIの実装 (main.py)
✅ 設定画面のタブ化（API設定 / カスタムプロンプト）
✅ カスタムプロンプト一覧画面
✅ プロンプト編集画面（新規作成・編集）
✅ メイン画面のテンプレート選択に📝アイコン付きでカスタムプロンプトを表示

## 現在の問題

### 問題: 設定画面が空白になる

**エラー1（解決済み）:**
```
AttributeError: module 'flet' has no attribute 'icons'
```
- **原因**: `ft.icons.KEY` が使えないFletバージョン
- **対応**: 文字列 `"key"`, `"edit_note"` に変更

**エラー2（未解決）:**
```
TypeError: Subscripted generics cannot be used with class and instance checks
```
- **発生箇所**: `flet/core/tabs.py` line 76
- **原因**: Python 3.9 + Fletの型チェックの互換性問題
- **問題のコード**: タブのアイコン指定部分

```python
tabs = ft.Tabs(
    tabs=[
        ft.Tab(
            text="API設定",
            icon="key",  # ← この部分で型チェックエラー
            content=...
        ),
        ...
    ]
)
```

## 次回の対応策

### 解決策A: アイコンを削除する（最も簡単）
タブからアイコンを完全に削除して、テキストのみにする：

```python
tabs = ft.Tabs(
    tabs=[
        ft.Tab(
            text="⚙️ API設定",  # 絵文字でアイコン代替
            content=self._create_api_settings_content()
        ),
        ft.Tab(
            text="📝 カスタムプロンプト",
            content=self._create_custom_prompt_content()
        ),
    ],
)
```

### 解決策B: Fletのバージョンを確認して更新する
```bash
pip3 show flet
pip3 install --upgrade flet
```

現在使用中のFletバージョンを確認し、0.24.0以降に更新すると解決する可能性があります。

### 解決策C: アイコンをNoneにする
```python
ft.Tab(
    text="API設定",
    icon=None,  # アイコンなし
    content=...
)
```

## 修正したバグ

### バグ1: ページ更新タイミングの問題
- **問題**: `_create_api_settings_content()` の `update_model_options()` が初期化時に `self.page.update()` を呼んでいた
- **修正**: `update_page` パラメータを追加し、初期化時はページ更新をスキップ

### バグ2: カスタムプロンプトリスト更新の問題
- **問題**: `_create_custom_prompt_content()` の初期化時に `refresh_prompt_list()` を呼び、その中で `self.page.update()` していた
- **修正**: 初期表示時は直接リストを構築し、`page.update()` を呼ばないようにした

### バグ3: メイン画面の再構築問題
- **問題**: 設定画面から戻るときに古いメインビューを復元していたため、新しいカスタムプロンプトが反映されなかった
- **修正**: 戻る時に `self._build_ui()` を呼んでメイン画面を再構築

## 実装の詳細

### カスタムプロンプトの保存場所
- **macOS**: `~/Library/Application Support/SummaryForDoc/config.json`
- **Windows**: `%APPDATA%/SummaryForDoc/config.json`

### データ構造
```json
{
  "anthropic_api_key": "sk-ant-...",
  "openai_api_key": "sk-...",
  "ai_provider": "anthropic",
  "ai_model": "claude-3-5-haiku-20241022",
  "custom_prompts": {
    "prompt_1234567890": {
      "name": "カスタムプロンプト1",
      "history_prompt": "病歴用プロンプトテキスト...",
      "symptoms_prompt": "症状用プロンプトテキスト...",
      "summary_prompt": "サマリー用プロンプトテキスト..."
    }
  }
}
```

### 動作フロー
1. 設定画面を開く
2. 「カスタムプロンプト」タブを選択
3. 「新規プロンプト作成」ボタンをクリック
4. プロンプト編集画面でプロンプトを作成
5. 「保存」ボタンをクリック
   - ConfigManagerが config.json に保存
   - PromptManager が再読み込み
6. 設定画面に戻る（プロンプト一覧に表示される）
7. 「戻る」ボタンでメイン画面に戻る
   - メイン画面が再構築される
   - テンプレート選択に📝アイコン付きでカスタムプロンプトが表示される

## 次回のタスク

### 優先度: 高
1. **タブのアイコン問題を解決** - 上記の解決策A, B, Cのいずれかを実施
2. **動作テスト** - 設定画面が正常に表示されることを確認
3. **カスタムプロンプトの作成テスト**
4. **カスタムプロンプトでの要約生成テスト**

### 優先度: 中
5. macOS版アプリのビルドとテスト
6. 開発メモ（開発メモ_OCR対応.txt）の更新

## 技術的メモ

### Fletのバージョン互換性
- Python 3.9 + Flet 0.24.0 の組み合わせで型チェックの問題が発生
- タブのアイコン指定で `IconValue` 型チェックがエラーになる
- 解決策: アイコンを削除するか、Fletをアップグレード

### 開発環境
- Python: 3.9
- Flet: 0.24.0
- OS: macOS

## 参考情報

### 関連ファイル
- `main.py` - GUIメインファイル（1355行）
- `src/config_manager.py` - 設定ファイル管理
- `src/prompts.py` - プロンプトテンプレート管理
- `src/config.py` - アプリケーション設定

### 重要なメソッド
- `_show_settings_screen()` - 設定画面表示（line 900）
- `_create_api_settings_content()` - API設定タブコンテンツ（line 964）
- `_create_custom_prompt_content()` - カスタムプロンプトタブコンテンツ（line 1108）
- `_show_prompt_editor()` - プロンプト編集画面（line 1232）

---

## 明日の作業開始時

1. まず上記の「解決策A」を試す（最も簡単で確実）
2. 動作確認
3. 問題なければビルドして実機テスト
4. 全機能が動作することを確認

## 追加メモ

- OCR機能は正常動作中
- API設定機能（Anthropic/OpenAI切り替え）は実装済み
- カスタムプロンプトのバックエンド機能は完成
- GUIの表示だけが残っている課題
