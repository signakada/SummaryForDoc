# SummaryForDoc - 開発経過メモ（OCR対応）

## 現在の状況（2025-10-30 更新）

### 完成済みの機能
1. ✅ ドラッグ&ドロップでのファイル読み込み機能
   - flet-dropzone (v0.2.0) を使用
   - main.py に実装済み

2. ✅ macOS版アプリのビルド
   - ビルド場所: build/macos/SummaryForDoc.app
   - CocoaPods インストール済み (v1.16.2)

3. ✅ PDFファイルの読み込みと要約
   - ドラッグ&ドロップで正常動作確認済み

4. ✅ テキストファイルの読み込みと要約
   - 複数エンコーディング対応（UTF-8, Shift_JIS, など）

5. ✅ **OCR機能（画像からテキスト抽出）** ← 2025-10-30 解決！
   - JPEG/PNG画像ファイルのOCR処理が正常動作
   - 日本語・英語の両方に対応
   - Tesseractをアプリバンドルに統合完了

### 解決済みの問題

#### OCR機能が動作しなかった問題 → ✅ 解決
- **症状**: JPEG/PNG画像ファイルをドラッグ&ドロップすると「すべてのファイル読み込みに失敗しました」エラー
- **原因**: Tesseractの依存ライブラリが不足していた
  - libtesseract.5.dylib (Tesseractコアライブラリ) が未コピー
  - libleptonica.6.dylib (画像処理ライブラリ) が未コピー
  - libarchive.13.dylib (アーカイブ処理ライブラリ) が未コピー
  - Tesseractバイナリが絶対パスで依存ライブラリを参照していた

#### 実施した解決策
1. **copy_tesseract.sh スクリプトの大幅改修**
   - すべての依存ライブラリをコピーするように修正
   - libtesseract.5.dylib, libleptonica.6.dylib, libarchive.13.dylib を追加
   - 画像処理関連ライブラリも追加（libjpeg, libpng, libtiff, libwebp, libgif, libopenjp2, libzstd）
   - install_name_tool でライブラリ参照パスを絶対パスから相対パスに変更
   - @executable_path/../Resources/tesseract/lib/ への参照に変更

2. **src/file_reader.py にデバッグログを追加**
   - _setup_tesseract() メソッドに詳細なログ出力を追加
   - sys.frozen, base_path, tesseract_cmd の確認が可能に

3. **ビルドと再配置の手順確立**
   ```bash
   rm -rf build
   ~/Library/Python/3.9/bin/flet build macos
   ./copy_tesseract.sh
   ```

4. **動作確認完了**
   - JPEGファイルでOCRテスト成功
   - テキスト抽出と要約が正常に動作

## 最新のアップデート（2025-10-30 追加機能）

### APIキー設定画面機能
1. ✅ 設定ファイルによるAPIキー管理
   - ユーザーのホームディレクトリに安全に保存
   - macOS: ~/Library/Application Support/SummaryForDoc/config.json
   - Windows: %APPDATA%/SummaryForDoc/config.json
   - .envファイルよりセキュア

2. ✅ 初回起動時の設定画面
   - APIキーが未設定の場合に自動表示
   - わかりやすいUI

3. ✅ 設定画面
   - メイン画面右上の⚙️ボタンからアクセス
   - APIキーの表示・編集
   - パスワード表示/非表示の切り替え

### OpenAI API対応
1. ✅ OpenAI APIキーのサポート
   - AnthropicとOpenAI両方のAPIキーを設定可能
   - プロバイダーの選択（Anthropic / OpenAI）

2. ✅ AIモデルの選択
   - Anthropic: Claude 3.5 Haiku / Sonnet / Opus
   - OpenAI: GPT-4o mini / GPT-4o / GPT-4 Turbo
   - プロバイダーに応じて自動でモデル選択肢を切り替え

3. ✅ summarizerのOpenAI統合
   - 既存のsummarizerはOpenAI APIを完全サポート済み
   - プロバイダーとモデルの動的切り替え

### カスタムプロンプト機能（基盤）
1. ✅ ConfigManagerにカスタムプロンプト保存機能を追加
   - get_custom_prompts()
   - save_custom_prompt()
   - delete_custom_prompt()

2. 📝 今後の拡張予定
   - カスタムプロンプト編集UI
   - プロンプトテンプレートのインポート/エクスポート
   - プロンプトライブラリ機能

## 次回の課題

### 1. カスタムプロンプト編集UI（優先度: 高）
- 設定画面にカスタムプロンプトタブを追加
- プロンプトの作成・編集・削除機能
- メイン画面のテンプレート選択にカスタムプロンプトを追加

### 2. デバッグログのクリーンアップ（オプション）
- src/file_reader.py の _setup_tesseract() にあるデバッグログを削除するか検討
- 本番環境では不要だが、トラブルシューティング時には有用
- 推奨: そのまま残しておく（問題発生時のデバッグに役立つ）

### 3. アプリバンドルの配布準備
- macOS版アプリの配布方法を検討
- コード署名（Code Signing）の実施
- 公証（Notarization）の実施（macOS Catalina以降）
- DMGファイルの作成

### 3. Windows版の開発
macOS版が完成したので、Windows版をビルド：

#### 必要な手順
1. Windows PCでの環境構築
   - Python 3.9以降をインストール
   - Tesseract for Windows をインストール
     - https://github.com/UB-Mannheim/tesseract/wiki
   - 日本語学習データをダウンロード

2. copy_tesseract_windows.bat スクリプトの作成
   - macOS版の copy_tesseract.sh を参考に作成
   - Windows向けのパス設定を実装
   - DLLファイルのコピーと参照パス修正

3. ビルドとテスト
   ```cmd
   rmdir /s /q build
   flet build windows
   copy_tesseract_windows.bat
   ```

### 4. 機能拡張の検討
- OCR精度の向上
  - 画像の前処理（ノイズ除去、コントラスト調整）
  - Tesseractの設定パラメータの最適化
- サポートする画像形式の追加（BMP, GIF, TIFF など）
- バッチ処理の改善（複数画像の一括処理）
- プログレスバーの追加（大きなファイルの処理時）

### 5. ユーザードキュメントの作成
- README.md の作成
- 使用方法の説明
- トラブルシューティングガイド
- スクリーンショットの追加

## 参考情報

### 使用技術
- Python 3.9
- Flet 0.24.0
- flet-dropzone 0.2.0
- Tesseract OCR 5.5.1
- pytesseract 0.3.10
- PyPDF2 3.0.0
- Pillow 10.0.0

### 重要なファイル
- main.py: GUIメインファイル
- src/file_reader.py: ファイル読み込み、OCR処理
- copy_tesseract.sh: Tesseractコピースクリプト
- requirements.txt: 依存ライブラリリスト

### Tesseractの場所
- システム: /opt/homebrew/bin/tesseract
- 学習データ: /opt/homebrew/share/tessdata/
- アプリバンドル: build/macos/SummaryForDoc.app/Contents/Resources/tesseract/

## 重要な知見とノウハウ

### macOSアプリバンドルへの外部バイナリ統合
1. **依存ライブラリの完全コピーが必須**
   - otool -L でバイナリが必要とするライブラリをすべて確認
   - システムライブラリ以外はすべてバンドルに含める

2. **ライブラリ参照パスの変更が必須**
   - install_name_tool を使って絶対パスを相対パスに変更
   - @executable_path や @loader_path を活用
   - バンドル内での相対パス構造を維持

3. **Fletのビルド構造**
   - 実行ファイル: Contents/MacOS/アプリ名
   - リソース: Contents/Resources/
   - Pythonコード: Contents/Resources/ 配下に配置される
   - sys.executable でメイン実行ファイルのパスが取得可能

4. **デバッグログの重要性**
   - print() でのログ出力はターミナルから起動時のみ確認可能
   - ビルド版のデバッグには欠かせない

## その他のメモ

### APIキー設定
- nano.env に Anthropic API キーが設定済み
- モデル: claude-3-5-haiku-20241022

### セキュリティ対策
- 個人情報マスク機能実装済み（src/pii_remover.py）
- 電話番号、メールアドレス、マイナンバーなどを自動マスク

### 既知の制限
- flet-dropzone は開発モード（python3 main.py）では動作しない
- ビルド版でのみドラッグ&ドロップが機能する

### 現在のアプリバンドル内容
```
build/macos/SummaryForDoc.app/
├── Contents/
│   ├── MacOS/
│   │   └── SummaryForDoc (実行ファイル)
│   └── Resources/
│       ├── tesseract/
│       │   ├── tesseract (バイナリ、86KB)
│       │   ├── tessdata/
│       │   │   ├── eng.traineddata (3.9MB)
│       │   │   └── jpn.traineddata (2.4MB)
│       │   └── lib/
│       │       ├── libtesseract.5.dylib (2.7MB)
│       │       ├── libleptonica.6.dylib (2.1MB)
│       │       ├── libarchive.13.dylib (686KB)
│       │       ├── libjpeg.8.dylib (475KB)
│       │       ├── libpng16.16.dylib (203KB)
│       │       ├── libtiff.6.dylib (527KB)
│       │       ├── libwebp.7.dylib (344KB)
│       │       ├── libgif.7.dylib (71KB)
│       │       ├── libopenjp2.7.dylib (317KB)
│       │       └── libzstd.1.dylib (634KB)
│       └── (Pythonコードとその他のリソース)
```

## まとめ

### macOS版 SummaryForDoc の完成
- ✅ すべての主要機能が動作
- ✅ テキスト、PDF、画像（OCR）のすべてに対応
- ✅ ドラッグ&ドロップによる直感的な操作
- ✅ 個人情報マスク機能
- ✅ Claude APIによる高精度な要約

次のステップは、Windows版の開発、アプリの配布準備、またはさらなる機能拡張です。

---
次回セッションでは、上記の「次回の課題」セクションから作業を開始してください。
